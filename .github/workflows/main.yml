<<<<<<< HEAD
# Main tests
# ==========
# Build the compiler with makefiles and run the testsuite
name: main

# Configure when to run the workflows. Currently only when
# it affects the `flambda2.0-stable` branch (either pushes to the branch,
# or pull request against it).
on:
  push:
    branches:
      - flambda2.0-stable
  pull_request:
    branches:
      - flambda2.0-stable

jobs:
  # Makefile-based: compile & run the testsuite
  # ===========================================
  build:

    runs-on: ${{ matrix.os }}

    # Build Matrix
    # --------------
    strategy:
      matrix:
        # Operating system to run tests on. TODO: add macos-latest and windows-latest
        # os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-latest]

    # Build ENV
    # ---------
    env:
      # Paralellism for builds
      J: "3"
      # disable flambda invariants else everything takes forever to compile
      OCAMLPARAM: "_,flambda-invariants=0"

    # Build/test steps
    # ----------------
    steps:
    # checkout the repo (shallow clone, currently)
    - name: Checkout the repo
      uses: actions/checkout@master
    # Apply ocamltest patch
    - name: Patch the repo
      run: git apply .github/workflows/ocamltest_makefile.patch
    # Install dependencies
    - name: Install dependencies
      run: sudo apt-get install parallel
    # Configure the compiler
    - name: configure
      run: ./configure --enable-flambda --without-ocamldoc
    # Debug step
    - name: Debug step
      run: echo "J is $J"
    # Build the compiler
    - name: Build the compiler
      run: |
        make -j $J world
        make -j $J opt
        make -j $J opt.opt
    # Build ocamlnat
    - name: Build ocamlnat
      run: |
        make -j $J ocamlnat
    # Generate list of tests to run
    - name: Generate test list
      run: grep -v '#' .github/workflows/test-list > .github/workflows/main.list
    # Build & Run some part of the testsuite
    - name: Running the testsuite
      run: |
        make -C testsuite tools lib
        make -C testsuite list-parallel FILE=../.github/workflows/main.list
    # If the testsuite has failed, dump the relavant ocamltest logs
    - name: Ocamltest failing logs
      if: failure()
      run: cd testsuite && make logs


=======
name: main

on: [push, pull_request]

jobs:
  no-naked-pointers:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: configure tree
      run: ./configure --disable-naked-pointers --disable-stdlib-manpages --disable-dependency-generation --enable-ocamltest
    - name: Build
      run: |
        make -j world.opt
    - name: Run the testsuite
      run: |
        make -C testsuite USE_RUNTIME=d all
  i386-static:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Packages
      run: |
        sudo apt-get update -y && sudo apt-get install -y gcc-multilib gfortran-multilib
    - name: configure tree
      run: |
        XARCH=i386 CONFIG_ARG='--disable-stdlib-manpages --disable-shared' bash -xe tools/ci/actions/runner.sh configure
    - name: Build
      run: |
        bash -xe tools/ci/actions/runner.sh build
    - name: Run the testsuite
      run: |
        bash -xe tools/ci/actions/runner.sh test
    - name: Install
      run: |
        bash -xe tools/ci/actions/runner.sh install
    - name: Other checks
      run: |
        bash -xe tools/ci/actions/runner.sh other-checks
  full-flambda:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Packages
      run: |
        sudo apt-get update -y && sudo apt-get install -y texlive-latex-extra texlive-fonts-recommended
  # Ensure that make distclean can be run from an empty tree
    - name: distclean
      run: |
        MAKE_ARG=-j make distclean
    - name: configure tree
      run: |
        MAKE_ARG=-j XARCH=x64 CONFIG_ARG='--enable-flambda --enable-dependency-generation' OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh configure
    - name: Build
      run: |
        MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh build
    - name: Run the testsuite
      run: |
        MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh test
    - name: Build API Documentation
      run: |
        MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh api-docs
    - name: Install
      run: |
        MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh install
    - name: Other checks
      run: |
        MAKE_ARG=-j OCAMLRUNPARAM=b,v=0 bash -xe tools/ci/actions/runner.sh other-checks
>>>>>>> ocaml/4.12
